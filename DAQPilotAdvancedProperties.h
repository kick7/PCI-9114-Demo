// DAQPilotAdv.h: interface for the DAQPilot APIs
//
//////////////////////////////////////////////////////////////////////
#if !defined(AFX_DAQAGENTADV_H__D948E897_E4F2_4f89_9A81_67D292E0FE49__INCLUDED_)
#define AFX_DAQAGENTADV_H__D948E897_E4F2_4f89_9A81_67D292E0FE49__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#ifdef __cplusplus
extern "C"
{
#endif

//#define DAQPILOT_TASK_VERSION          1.1 //support multi combo tasks(9524)
#define DAQPILOT_TASK_VERSION          1.2 //support twenty tasks (7350)

enum DAQPilot_TASK_ID //Note: same with Device Type don't chage the index value
{
	DAQPilot_TASK_AI         = 0x0001,
	DAQPilot_TASK_AO         = 0x0002,
	DAQPilot_TASK_DI         = 0x0004,
	DAQPilot_TASK_DO         = 0x0008,
	DAQPilot_TASK_TC         = 0x0010,
};

enum DAQPilot_SUB_TASK_ID
{
	DAQPilot_TASK_AI_VOLTAGE_POLLING  	= 0x00010000,
	DAQPilot_TASK_AI_CURRENT_POLLING  	= 0x00010001,
	DAQPilot_TASK_AI_ONESHOT          	= 0x00010002,
	DAQPilot_TASK_AI_CONTINUE         	= 0x00010003,
	DAQPilot_TASK_AI_THERMOCOUPLE	  	= 0x00010004,		// Added by Roger for USB-2401 in 20120806
	DAQPilot_TASK_AI_RTD				= 0x00010005,		// Added by Roger for USB-2401 in 20120806		
	DAQPilot_TASK_AI_RESISTANCE			= 0x00010006,		// Added by Roger for USB-2401 in 20120806
	DAQPilot_TASK_AI_FULL_BRIDGE		= 0x00010007,		// Added by Roger for USB-2401 in 20120806
	DAQPilot_TASK_AI_HALF_BRIDGE		= 0x00010008,		// Added by Roger for USB-2401 in 20120806
	DAQPilot_TASK_AO_VOLTAGE_OUTPUT   	= 0x00020000,
	DAQPilot_TASK_AO_CURRENT_OUTPUT   	= 0x00020001,
	DAQPilot_TASK_AO_ONESHOT          	= 0x00020002,
	DAQPilot_TASK_AO_CONTINUE         	= 0x00020003,
	DAQPilot_TASK_AO_FUNCTION_GEN     	= 0x00020004,
	DAQPilot_TASK_DI_LINE_INPUT       	= 0x00040000,
	DAQPilot_TASK_DI_PORT_INPUT       	= 0x00040001,
	DAQPilot_TASK_DI_ONESHOT          	= 0x00040002,
	DAQPilot_TASK_DI_CONTINUE         	= 0x00040003,
	DAQPilot_TASK_DO_LINE_OUTPUT      	= 0x00080000,
	DAQPilot_TASK_DO_PORT_OUTPUT      	= 0x00080001,
	DAQPilot_TASK_DO_ONESHOT          	= 0x00080002,
	DAQPilot_TASK_DO_CONTINUE         	= 0x00080003,
	DAQPilot_TASK_TC_COUNTER          	= 0x00100000,
	DAQPilot_TASK_TC_TIMER_INTERRUPT  	= 0x00100001,
	DAQPilot_TASK_TC_MODE_OPERATION   	= 0x00100002,
	DAQPilot_TASK_TC_INTERRUPT        	= 0x00100003,
};

//All device new device id
typedef enum tagAllDeviceTypeID
{
	//Global device
	DEVICEID_NULL  = 0,
	DEVICEID_VIRTUAL_DEVICE = 1,
	//Real device
	DEVICEID_PCI_6208V = 10,
	DEVICEID_PCI_6208A = 20,
	DEVICEID_PCI_6216V = 30,
	DEVICEID_PCI_6308V = 40,
	DEVICEID_PCI_6308A = 50,
	DEVICEID_PCI_7200  = 60,
	DEVICEID_cPCI_7200 = 70,
	DEVICEID_PCI_7230  = 80,
	DEVICEID_PCI_7233  = 90,
	DEVICEID_PCI_7234  = 100,
	DEVICEID_PCI_7224  = 110,
	DEVICEID_PCI_7248  = 120,
	DEVICEID_PCI_7249  = 130,
	DEVICEID_PCI_7250  = 140,
	DEVICEID_PCI_7251  = 150,
	DEVICEID_PCI_7252  = 160,
	DEVICEID_PCI_7256  = 170,
	DEVICEID_PCI_7258  = 180,
	DEVICEID_PCI_7260  = 190,
	DEVICEID_PCI_7296  = 200,
	DEVICEID_PCI_7348  = 210,
	DEVICEID_PCI_7396  = 220,
	DEVICEID_PCI_7300A_RevA = 230,
	DEVICEID_PCI_7300A_RevB = 240,
	DEVICEID_PCI_7350 = 245,
	DEVICEID_PCI_7432 = 250,
	DEVICEID_PCI_7433 = 260,
	DEVICEID_PCI_7434 = 270,

	DEVICEID_PCI_7442 = 280,
	DEVICEID_PCI_7443 = 290,
	DEVICEID_PCI_7444 = 300,

	DEVICEID_PCI_7452 = 310,

	DEVICEID_PCI_8554 = 320,
	DEVICEID_PCI_9111DG = 330,
	DEVICEID_PCI_9111HR = 340,
	DEVICEID_PCI_9112 = 350,
	DEVICEID_PCI_9113 = 360,
	DEVICEID_PCI_9114DG = 370,
	DEVICEID_PCI_9114HG = 380,
	DEVICEID_PCI_9114A_DG = 390,
	DEVICEID_PCI_9114A_HG = 400,
	DEVICEID_cPCI_9116 = 410,
	DEVICEID_PCI_9118DG = 420,
	DEVICEID_PCI_9118HG = 430,
	DEVICEID_PCI_9118HR = 440,

	DEVICEID_PCI_9221 = 450,
	DEVICEID_PCI_9222 = 451,
	DEVICEID_PCI_9223 = 452,

	DEVICEID_PCI_9810 = 460,
	DEVICEID_PCI_9812 = 470,
	DEVICEID_PCI_9812A = 480,

	//PCI New device
	DEVICEID_PCI_6202 = 500,
	DEVICEID_PCI_9524 = 501,

	DEVICEID_PCI_9820 = 1000,

	//WD New device
	DEVICEID_PXI_9816D   = 1001,
	DEVICEID_PXI_9826D   = 1002,
	DEVICEID_PXI_9846D   = 1003,
	DEVICEID_PXI_9846DW  = 1004,
	DEVICEID_PXI_9816H   = 1005,
	DEVICEID_PXI_9826H   = 1006,
	DEVICEID_PXI_9846H   = 1007,
	DEVICEID_PXI_9846HW  = 1008,
	DEVICEID_PXI_9816V   = 1009,
	DEVICEID_PXI_9826V   = 1010,
	DEVICEID_PXI_9846V   = 1011,
	DEVICEID_PXI_9846VW  = 1012,
	DEVICEID_PCI_9816D   = 1021,
	DEVICEID_PCI_9826D   = 1022,
	DEVICEID_PCI_9846D   = 1023,
	DEVICEID_PCI_9846DW  = 1024,
	DEVICEID_PCI_9816H   = 1025,
	DEVICEID_PCI_9826H   = 1026,
	DEVICEID_PCI_9846H   = 1027,
	DEVICEID_PCI_9846HW  = 1028,
	DEVICEID_PCI_9816V   = 1029,
	DEVICEID_PCI_9826V   = 1030,
	DEVICEID_PCI_9846V   = 1031,
	DEVICEID_PCI_9846VW  = 1032,
	DEVICEID_PCIE_9816D  = 1041,
	DEVICEID_PCIE_9826D  = 1042,
	DEVICEID_PCIE_9846D  = 1043,
	DEVICEID_PCIE_9846DW = 1044,
	DEVICEID_PCIE_9816H  = 1045,
	DEVICEID_PCIE_9826H  = 1046,
	DEVICEID_PCIE_9846H  = 1047,
	DEVICEID_PCIE_9846HW = 1048,
	DEVICEID_PCIE_9816V  = 1049,
	DEVICEID_PCIE_9826V  = 1050,
	DEVICEID_PCIE_9846V  = 1051,
	DEVICEID_PCIE_9846VW = 1052,
	DEVICEID_PXI_9846VID = 1053,
	DEVICEID_PCI_9842    = 1054,
	DEVICEID_PXI_9848    = 1055,
	
	DEVICEID_DAQ_2005 = 1510,
	DEVICEID_DAQ_2006 = 1520,
	DEVICEID_DAQ_2010 = 1530,
	DEVICEID_DAQ_2016 = 1540,
	DEVICEID_DAQ_2020 = 1544,
	DEVICEID_DAQ_2022 = 1545,
	DEVICEID_DAQ_2204 = 1550,
	DEVICEID_DAQ_2205 = 1560,
	DEVICEID_DAQ_2206 = 1570,
	DEVICEID_DAQ_2208 = 1580,
	DEVICEID_DAQ_2213 = 1590,
	DEVICEID_DAQ_2214 = 1600,
	DEVICEID_DAQ_2501 = 1610,
	DEVICEID_DAQ_2502 = 1620,
	//D2K New device

	//DSA Dask device
	DEVICEID_PCI_9527  = 2050,

	DEVICEID_USB_1901  = 3001,
	DEVICEID_USB_1902  = 3002,
	DEVICEID_USB_1903  = 3003,
	DEVICEID_USB_2401  = 3004,	// Added USB_2401 code by Roger in 20120416
	DEVICEID_USB_7250  = 3005,  // Added USB_7250 code by Paul in 20120911
	DEVICEID_USB_7230  = 3006,  // Added USB_7230 code by Paul in 20120911
} AllDeviceTypeID;

//Channel property IDs
typedef enum tagChannelPropertyID
{
	//Global
	CP_Error     = 0,
	CP_ChannelNum = 1,
	//Channel gain queue
	CP_Enable    = 50,
	CP_Range     = 51,
	CP_RefGround = 52,
	CP_Polarity  = 53,
	CP_IntOrExtRef = 54,
	CP_RefVoltage  = 55,
	
	//Only using for USB-2401
	CP_ChanCfg = 60,
	CP_PollingSpeed = 65,
	CP_MAvgStageCh = 66,
	CP_InType = 67,
	CP_ThermoType = 68,
	
	//Only using for USB-72x0
	CP_DIFltrCh = 69,
	CP_DIActvChan = 70,
	CP_DIFltrWidth = 71,
	
	CP_CTRFltrSW = 72,
	CP_CTRCtrl = 73,
	CP_CTRFltrWidth = 74,
	
	CP_CTRFqActvChan = 75,
	CP_CTRReadFreq = 76,
	
	CP_CTRRsActvChan = 77,
	CP_CTRRsEgCount = 78,
	
	
	
	

	
	//DIO
	CP_Note = 100,
	CP_PortWidth = 101,
	CP_PortMask = 102,
	CP_SDIEnable = 103,

	//Timer/Counter
    CP_TimeBase           = 140,
    CP_ModeOperation      = 150,
	CP_InitialValue       = 151,
	CP_DirControl         = 152,
	CP_ClockSource	      = 153,
	CP_GateSource         = 154,
	CP_UpDownSource       = 155,
	//8554 only
	CP_DataFormat         = 156,
	//2k serials only
	CP_InitialGateValue   = 157,
	CP_InitialUpDownValue = 158,
	CP_DelayCount         = 159,
	CP_DurationCount      = 160,
	CP_ClockActPolarity   = 161,
	CP_GateActPolarity    = 162,
	CP_UpDownActPolarity  = 163,
	CP_OutputActPolarity  = 164,
	CP_ZPhaseClearPhase   = 165,
	CP_ZPhaseClearMode    = 166,
	CP_PulseCount         = 167,
	CP_DOLine             = 168,

	//Function generator
	CP_SignalType = 200,
	CP_Frequency  = 201,
	CP_Amplitude  = 202,
	CP_Offset     = 203,
	CP_Phase      = 204,
	CP_DutyCycle  = 205,

	//9524 Load cell
    CP_SpikeRejecter   = 210,
	CP_DFStage         = 211,
	CP_SPKRejThreshold = 212,
	CP_PollSpeed       = 213,
	CP_Repeat          = 214,
	CP_ExcitVolt       = 215,
    CP_EnableRemoteSense = 216,
	CP_EnableAutoZero    = 217,
	CP_EnableAIEnEOCInt  = 218,
	//98x4 AI
	CP_Impedance         = 220,
	CP_Dither            = 221,

	//COS
	CP_COS_MASK          = 230,

	//7350 DIO
	CP_ChannelValue      = 231,
	CP_VoltageLevel      = 232,
	CP_TriggerOut        = 233,
	CP_TriggerOutLength  = 234,
	CP_PatternMatchLevel = 235,
	CP_PatternMatchEdge  = 236,
	CP_SlaveAddress      = 237,
	CP_ClockPreScale     = 238,
	CP_ClockMode         = 239,
	CP_TX_Polarity       = 240,
	CP_RX_Polarity       = 241,
	CP_TransferOrder     = 242,

	//9527 AI
	CP_IEPE              = 260,
	CP_Coupling          = 261,
	
	//AI channel support for pxie-9848, added by Roger in 20120815
	CP_Bandwidth		 = 262,
} ChannelPropertyID;

//Property IDs
typedef enum tagDAQPilotPropertyID
{
	//System parameter
	DP_IN_ERROR = 0,                //Internal
	DP_IN_GLOBAL = 1,				//Internal
	DP_IN_CREATE_TASK = 2,			//Internal
	DP_IN_ACTIVEX_SUPPORT = 3,		//Bool
	DP_SYS_TASK_ID = 4,				//UI4
	DP_IN_DASK_HANDLE = 5,		    //I2
	DP_IN_AUTO_BUFFER = 6,	        //Bool
	DP_IN_WAIT_FOR_EVENT_OBJECT = 7,//Bool
	DP_IN_TRIGGER_FIRE_SOFTWARE_TRIGGER = 8, //Bool
	DP_IN_SCALING_DATA_THREADS = 9,         //UI4
	DP_IN_DOUBLE_BUFFER_CHECK_OVERRUN = 10, //Bool
	DP_IN_WAIT_FOR_USER_READ_DATA = 11,     //Bool
	DP_IN_DATA_STAMP_LOW_DATA_TIME = 12,    //UI4
	DP_IN_DATA_STAMP_HIGH_DATA_TIME = 13,   //UI4
	DP_IN_GET_ACTUAL_RATE = 14,             //R8
	DP_IN_DATA_SEGMENT_START_POS = 15,      //UI4
	
	//Select device
	DP_SYS_DEVICE_TYPE = 50,		//UI4
	DP_SYS_DEVICE_INDEX = 51,       //I4
	DP_IN_DEVICE_CHANNEL = 52,      //Internal
	DP_DEVICE_CHANNEL_CONFIGURATION = 53, //Enum 
	
	//USB-72x0 only
	DP_DICosLahData = 60,
	DP_DICosIntCtrl = 61,
	DP_DOPattern = 62,
	DP_DICosTimeOut = 63,
	DP_DICosEventHandle = 64,
	DP_DIAutoResetCosInt = 65,
	DP_SetDOPattern = 66,
	DP_GetDOPattern = 67,
	
	//Timing 
	DP_IN_TIMING = 100,             //Internal
	DP_TIMING_CLOCK_SOURCE = 101,   //F64
	DP_TIMING_SCAN_RATE = 102,      //F64
	DP_TIMING_UPDATE_RATE = 103,    //F64
	DP_TIMING_TRANSFER_RATE = 104,  //F64
	DP_TIMING_NUM_OF_SCAN = 105,    //UI4
	DP_TIMING_TIMING_LIST = 106,    //Internal
	DP_TIMING_TIMEBASE_SRC = 107,   //Enum
	DP_TIMING_RESTART_MODE = 108,   //Enum
	DP_TIMING_RESTART_COUNT = 109,  //I2
	
	//Adv Timing
	DP_TIMING_CONTINUE = 151,          //Bool
	DP_TIMING_SAMPLING_RATE = 152,     //F64
	DP_TIMING_SCAN_INTERVAL = 153,     //UI4
	DP_TIMING_SAMPLE_INTERVAL = 154,   //UI4
	DP_TIMING_UPDATE_INTERVAL = 155,   //UI4
	DP_TIMING_ITERATION_MODE  = 156,   //Enum
	DP_TIMING_ITERATION_COUNT = 157,   //I2
	DP_TIMING_VIRTUAL_MEMORY  = 158,   //Bool
	DP_TIMING_9111_EDO_MODE   = 159,   //Enum
	DP_TIMING_9116_COMMON_MODE = 160,  //Enum
	DP_TIMING_9116_CONVERSION_MODE = 161,//Enum
	DP_TIMING_9118_EXT_CLOCK_POL = 162,  //Enum
	DP_TIMING_9118_EXT_GATE = 163,       //Enum
	DP_TIMING_9118_BURST_MODE = 164,     //Enum
	DP_TIMING_9118_BURST_COUNT = 165,    //UI4
	DP_TIMING_9812_FREQUENCE_MODE = 166, //Enum
	DP_TIMING_9812_EXT_TRI_CLOCK_DIVIDER = 167, //UI4
	DP_TIMING_9820_PING_PONG = 168,      //Bool
	DP_TIMING_9820_DUTY_RESTORE = 169,   //Bool
	DP_TIMING_9820_TWO_STEP = 170,       //Bool
	DP_TIMING_9820_DIAL_BUFFER = 171,    //Bool
	DP_TIMING_9820_SSI_TIMEBASE = 183,   //Enum (DP_TIMING_DAQ2K_SSI_TIMEBASE)
	DP_TIMING_9820_SSI_TRIGGER = 185,    //Enum (DP_TIMING_DAQ2K_SSI_ADTRIGGER)
	DP_TIMING_9820_SSI_START_AND_TRIGGER = 174, //Enum
	DP_TIMING_SSI_TIMEBASE = 183,          //Enum (DP_TIMING_DAQ2K_SSI_TIMEBASE)
	DP_TIMING_SSI_CONVERT  = 184,          //Enum (DP_TIMING_DAQ2K_SSI_CONVERT)
	DP_TIMING_SSI_TRIGGER  = 185,          //Enum (DP_TIMING_DAQ2K_SSI_ADTRIGGER)
	DP_TIMING_SSI_START_AND_TRIGGER = 174, //Enum (DP_TIMING_9820_SSI_START_AND_TRIGGER)
	DP_TIMING_SSI_START    = 175,          //Enum
	DP_TIMING_TWO_STEP_DMA = DP_TIMING_9820_TWO_STEP,       //Bool
	DP_TIMING_DIAL_BUFFER  = DP_TIMING_9820_DIAL_BUFFER,    //Bool
	DP_TIMING_TWO_STEP_DMA_NUM_OF_SCAN = 176, //UI4
	DP_TIMING_FIFO_UPDATE = 177,
	
	//DP_TIMING_DAQ2K_DASOURCE = 178,       //Enum
	DP_TIMING_DAQ2K_AO_ANA_TRIG_RANGE = 179, //Enum
	DP_TIMING_DAQ2K_AO_STOP_SOURCE = 180,    //Enum
	DP_TIMING_DAQ2K_AO_STOP_MODE = 181,      //Enum
	DP_TIMING_25XX_AO_UPDATE_MODE = 182,     //Enum

	DP_TIMING_DAQ2K_SSI_TIMEBASE = 183,      //Enum
	DP_TIMING_DAQ2K_SSI_CONVERT = 184,       //Enum
	DP_TIMING_DAQ2K_SSI_ADTRIGGER = 185,     //Enum
	DP_TIMING_DAQ2K_SSI_UPDATE = 186,        //Enum
	DP_TIMING_DAQ2K_SSI_DATRIGGER = 187,     //Enum
	DP_TIMING_TRIGGER_POL = 188, //only for 7200 //Enum
	DP_TIMING_TRIGGER_WAIT = 189,//7200+7300  //Bool
	DP_TIMING_7300_TERMINATOR = 190,          //Bool
	DP_TIMING_7300_CLEAR_FIFO = 191,          //Bool
	DP_TIMING_7300_DIS_DI_AFTER_DMA = 192,    //Bool
	DP_TIMING_DI_REQ_POL = 193,//7200+7300    //Enum
	DP_TIMING_DI_ACK_POL = 194,//7300+7350    //Enum
	DP_TIMING_DI_TRIG_POL = 195,//only for 7300//Enum
	DP_TIMING_7200_DO_REQ_ENABLE = 196,       //Bool
	DP_TIMING_7200_DO_TRIGGER_SIGN = 197,     //UI2
	DP_TIMING_7300_TRIGGER_WAIT_STATUS = 198, //UI2
	DP_TIMING_7300_FIFO_THRESHOLD = 199,      //UI4
	DP_TIMING_7300_DIS_DO_AFTER_DMA = 200,    //Bool
	DP_TIMING_DO_REQ_POL = 201,//7200+7300    //Enum
	DP_TIMING_DO_ACK_POL = 202,//7300+7350    //Enum
	DP_TIMING_DO_TRIG_POL = 203,//only for 7300 //Enum
	DP_TIMING_DI_REQ_SOURCE	= 204,              //Enum
	DP_TIMING_DI_ACK_SOURCE	= 205,              //Enum
	DP_TIMING_DO_REQ_SOURCE	= 206,              //Enum
	DP_TIMING_DO_ACK_SOURCE	= 207,              //Enum
	//7350
	DP_TIMING_CLOCK_EDGE  			= 210, //Enum
	DP_TIMING_CLOCK_RUN_MODE		= 211, //Enum
	DP_TIMING_DIO_DDA_MODE			= 212, //Enum
	DP_TIMING_DIO_DDA_VALUE			= 213, //I4
	DP_TIMING_DIO_DPA_MODE			= 214, //Enum
	DP_TIMING_DIO_DPA_VALUE			= 215, //I4
	DP_TIMING_EXPORT_CLOCK_SOURCE	= 216, //Enum
	DP_TIMING_EXPORT_DIO_DPA_MODE	= 217, //Enum
	DP_TIMING_EXPORT_DIO_DPA_VALUE	= 218, //I4

	// Event handle property for 9524 load cell
	DP_EVENT_CALLBACK_MODE	= 219, //I4
	DP_EVENT_CALLBACK_TYPE	= 220, //I4

	//DP_TIMING_9524_EXCIT_VOLT = 220,
	//DP_TIMING_9524_REF_VOLT_MODE = 221,
	//DP_TIMING_9524_AUTO_ZERO_MODE = 222,

	//9842
	DP_TIMING_9842_TRIGGEROUT_WIDTH   = 225, //UI4

	//PXI trigger line
	DP_TIMING_PXI_TIMEBASE_LINE = 230,          //DP_TIMING_SSI_TIMEBASE
	DP_TIMING_PXI_TRIGGER_LINE  = 231,          //DP_TIMING_SSI_TRIGGER
	DP_TIMING_PXI_START_LINE    = 232,          //DP_TIMING_SSI_START_AND_TRIGGER
	DP_TIMING_PXI_CONVERT_LINE  = 233,


	//Timer/Counter
	DP_IN_TIMER_COUNTER = 250,   //Internal
	DP_TC_TIME_INTERVAL = 251,   //UI4
	DP_TC_8554_CK1_SOURCE = 252,     //Enum
	DP_TC_8554_DEBOUNCE_SOURCE = 253,//Enum
	DP_TC_TIMER_COUNTER_LIST = 254, //Internal
	DP_DO_FRONT_DUMMY_BITS = 255, //7350 SPI support
	DP_DO_TAIL_DUMMY_BITS = 256,  //7350 SPI support

	// Added signal routing definition by Roger in 20120315------------------------------------------------------
	DP_TIMING_DAQ2K_PXI_ROUTE_SIGNAL = 257,      	//Route signal
	DP_TIMING_DAQ2K_PXI_ROUTE_LINE = 258,       	//Route line
	DP_TIMING_DAQ2K_PXI_ROUTE_DIRECTION = 259,     	//Route direction
	DP_TIMING_DAQ2K_PXI_ROUTE = 260,     			//SSI route
	// Added signal routing definition by Roger in 20120315------------------------------------------------------

	//Basic trigger
	DP_TRIGGER_SOURCE = 400,          //Enum
	DP_TRIGGER_MODE = 401,            //Enum
	DP_TRIGGER_DELAY_COUNT = 402,     //UI4
	DP_TRIGGER_POST_COUNT = 403,      //UI4
	DP_TRIGGER_RETRIGGER_MODE = 404,  //Enum
	DP_TRIGGER_RETRIGGER_COUNT = 405, //UI4
	DP_TRIGGER_DIG_POLARITY = 406,    //Enum
	DP_TRIGGER_ANA_VOLTAGE = 407,     //F64
	
	//D2K trigger
	DP_D2K_TRIGGER_DELAY_SOURCE = 450,    //Enum
	DP_D2K_TRIGGER_DELAY2_SOURCE = 451,   //Enum
	DP_D2K_TRIGGER_DELAY2_COUNT = 452,    //I4
	DP_D2K_TRIGGER_DELAY_COUNTER_SOURCE = 453, //Enum
	DP_D2K_TRIGGER_BREAK_DELAY_COUNTER_SOURCE = 454, //Enum
	DP_D2K_TRIGGER_MCOUNTER_ENABLE = 455, //Bool
	DP_D2K_TRIGGER_MCOUNTER_COUNT = 456,  //UI4
	DP_D2K_TRIGGER_ANA_TRIG_SOURCE = 457, //Enum
	DP_D2K_TRIGGER_ANA_TRIG_CONDITION = 458,    //Enum 
	DP_D2K_TRIGGER_ANA_H_LEVEL = 459,     //F64
	DP_D2K_TRIGGER_ANA_L_LEVEL = 460,     //F64

	//Adv trigger
	DP_IN_ADV_TRIGGER = 470,              //Internal
	DP_ADV_TRIGGER_SOFTWARE_TRIG_OUT_SOURCE = 471,  //Enum
	DP_ADV_TRIGGER_SOFTWARE_TRIG_OUT_LENGTH = 472,  //UI4
	DP_ADV_TRIGGER_GATED_TRIG_START_SOURCE  = 473,  //Enum
	DP_ADV_TRIGGER_GATED_TRIG_START_POLARITY= 474,  //Enum

	//Advanced A/D mode
	DP_ADV_AD_MODE							= 480, //Enum
	
	//Data
	DP_DATA_DATA_FORMAT = 500,         //Enum
	DP_DATA_LOGFILE = 501,             //Bool
	DP_DATA_LOGFILENAME = 502,         //String
	DP_DATA_FILESYSTEM = 503,          //Internal
} DAQPilotPropertyID;

typedef enum tagDAQPilotValueID
{
	//Global
	DPV_UNDEF = 0,
	DPV_NONE = 100,	//Don't move the DPV_NONE to low id
    DPV_INTERNAL = 101,
	DPV_EXTERNAL = 102,
	DPV_SSI = 103,
	DPV_FALSE = 104,
	DPV_TRUE = 105,
	DPV_DISABLE = 106,
	DPV_ENABLE = 107,
	DPV_POLARITY_POSITIVE = 108,
	DPV_POLARITY_NEGATIVE = 109,
	DPV_FALLING_EDGE = 110,
	DPV_RISING_EDGE = 111,
	DPV_HIGH = 112,
	DPV_LOW = 113,
	DPV_JUMPER = 114,
	DPV_AFI0   = 115,
	DPV_AFI1   = 116,
	DPV_AFI2   = 117,
	DPV_AFI3   = 118,
	DPV_AFI4   = 119,
	DPV_AFI5   = 120,
	DPV_AFI6   = 121,
	DPV_AFI7   = 122,
	DPV_TRIG_IO= 123,
	DPV_SLOPE_RISING = 124,
	DPV_SLOPE_FALLING = 125,

	//Channel configuration
	DPV_DEVICE_CHANNEL_ISOLATED = 170,
	DPV_DEVICE_CHANNEL_TTL = 171,
	DPV_DEVICE_CHANNEL_COUNTER = 172,
	DPV_DEVICE_CHANNEL_PWM = 173,
	DPV_DEVICE_CHANNEL_ENCODER = 174,
	DPV_DEVICE_CHANNEL_LOAD_CELL = 175,
	DPV_DEVICE_CHANNEL_AI = 176,
	DPV_DEVICE_CHANNEL_PULSE_GEN = 177,
	DPV_DEVICE_CHANNEL_DO = 178,
	DPV_DEVICE_CHANNEL_I2C = 179,
	DPV_DEVICE_CHANNEL_SPI = 180,
	DPV_DEVICE_CHANNEL_COS = 181,
	DPV_DEVICE_CHANNEL_PTN_MATCH = 182,
	DPV_DEVICE_CHANNEL_DI  = 183,
	DPV_DEVICE_CHANNEL_AO  = 184,
	DPV_DEVICE_CHANNEL_XLR = 185,
	DPV_DEVICE_CHANNEL_GPTC = 186,
	DPV_DEVICE_CHANNEL_OUT_DIR = 187,
	DPV_DEVICE_CHANNEL_CW_CCW = 188,

	//All AD Range id
	DPV_RANGE_0_V    = 200,
	DPV_RANGE_B_10_V = 201,
	DPV_RANGE_B_5_V = 202,
	DPV_RANGE_B_2_5_V = 203,
	DPV_RANGE_B_2_V = 204,
	DPV_RANGE_B_1_25_V = 205,
	DPV_RANGE_B_1_V = 206,
	DPV_RANGE_B_0_625_V = 207,
	DPV_RANGE_B_0_5_V = 208,
	DPV_RANGE_B_0_3125_V = 209,
	DPV_RANGE_B_0_25_V = 210,
	DPV_RANGE_B_0_2_V = 211,
	DPV_RANGE_B_0_1_V = 212,
	DPV_RANGE_B_0_05_V = 213,
	DPV_RANGE_B_0_01_V = 214,
	DPV_RANGE_B_0_005_V = 215,
	DPV_RANGE_B_0_001_V = 216,
	DPV_RANGE_U_20_V = 217,
	DPV_RANGE_U_10_V = 218,
	DPV_RANGE_U_5_V = 219,
	DPV_RANGE_U_4_V = 220,
	DPV_RANGE_U_2_5_V = 221,
	DPV_RANGE_U_2_V = 222,
	DPV_RANGE_U_1_25_V = 223,
	DPV_RANGE_U_1_V = 224,
	DPV_RANGE_U_0_5_V = 225,
	DPV_RANGE_U_0_4_V = 226,
	DPV_RANGE_U_0_1_V = 227,
	DPV_RANGE_U_0_01_V = 228,
	DPV_RANGE_U_0_001_V = 229,
	DPV_RANGE_B_40_V = 230,
	DPV_RANGE_B_3_16_V = 231,
	DPV_RANGE_B_0_316_V = 232,
	DPV_RANGE_B_1_5_V = 233,
	DPV_RANGE_B_0_2145_V = 234,
	//DPV_RANGE_B_0_4_V = 235,
	DPV_RANGE_B_12_5_V = 235,
	DPV_RANGE_B_25_V = 236,

	//Current range support
	DPV_RANGE_0_000_0_020_A = 250,
	DPV_RANGE_0_004_0_020_A = 251,
	DPV_RANGE_0_005_0_025_A = 252,
	
	//AI Reference ground
	DPV_AI_REFGROUND_RSE = 300,
	DPV_AI_REFGROUND_DIFF = 301,
	DPV_AI_REFGROUND_NRSE = 302,
	DPV_AIO_REFGROUND_DIFF = DPV_AI_REFGROUND_DIFF,
	DPV_AIO_REFGROUND_PSEUDO_DIFF = 303,
	
	//AI input type(only for USB-2401)
	DPV_AI_Voltage_2D5V_Above = 304,
	DPV_AI_Voltage_2D5V_Below = 305,
	DPV_AI_Current = 306,          
	DPV_AI_RTD_4_Wire = 307,        
	DPV_AI_RTD_3_Wire = 308,        
	DPV_AI_RTD_2_Wire = 309,        
	DPV_AI_Resistor = 310,          
	DPV_AI_ThermoCouple = 311,      
	DPV_AI_Full_Bridge = 312,       
	DPV_AI_Half_Bridge = 313,  
	
	//AI polling speed(only for USB-2401)
	DPV_AI_ADC_2000_SPS  = 314,
	DPV_AI_ADC_1000_SPS  = 315,
	DPV_AI_ADC_640_SPS = 316,
	DPV_AI_ADC_320_SPS = 317,
	DPV_AI_ADC_160_SPS = 318,
	DPV_AI_ADC_80_SPS = 319,
	DPV_AI_ADC_40_SPS = 320,
	DPV_AI_ADC_20_SPS = 321,
	
	//AI moving average stage(only for USB-2401)
	// wMAvgStageCh1 ~ wMAvgStageCh4 in UD_AI_2401_PollConfig()
	DPV_AI_Polling_MAvg_Disable = 322,
	DPV_AI_Polling_MAvg_2_Sampes = 323,
	DPV_AI_Polling_MAvg_4_Sampes = 324,
	DPV_AI_Polling_MAvg_8_Sampes = 325,
	DPV_AI_Polling_MAvg_16_Sampes = 326,
	
	//ADC_to_Thermo()
	DPV_AI_THERMO_B_TYPE 	= 331,
	DPV_AI_THERMO_C_TYPE 	= 332,
	DPV_AI_THERMO_E_TYPE 	= 333,
	DPV_AI_THERMO_K_TYPE 	= 334,
	DPV_AI_THERMO_R_TYPE 	= 335,
	DPV_AI_THERMO_S_TYPE 	= 336,
	DPV_AI_THERMO_T_TYPE 	= 337,
	DPV_AI_THERMO_J_TYPE 	= 338,
	DPV_AI_THERMO_N_TYPE 	= 339,
	DPV_AI_RTD_PT100 		= 340,

	// -------------------------------------------------------
	//AO Polarity and external voltage
    DPV_AO_POLARITY_BIPOLAR = 350,
	DPV_AO_POLARITY_UNIPOLAR = 351,
	DPV_AO_REFVOLTAGE_INTERNAL = 352,
	DPV_AO_REFVOLTAGE_EXTERNAL = 353,
	
	//AO Function generator
	DPV_AO_SIGNAL_SIN = 400,
	DPV_AO_SIGNAL_SQUARE = 401,
	DPV_AO_SIGNAL_TRIANGLE = 402,
	DPV_AO_SIGNAL_SAWTOOTH = 403,
	DPV_AO_SIGNAL_DC = 404,
	//SPI
	DPV_DIO_CLOCK_MODE_MSB = 410,
	DPV_DIO_CLOCK_MODE_LSB = 411,
	//AI Coupling
	DPV_AI_COUPLING_AC     = 412,
	DPV_AI_COUPLING_DC     = 413,

	//CP_Bandwidth		 = 262,
	DPV_AI_BANDWIDTH_DEVICE_DEFAULT = 414,
	DPV_AI_BANDWIDTH_20M			= 415,
	DPV_AI_BANDWIDTH_100M			= 416,
	
	// -------------------------------------------------------
	// Added definition of USB-2401 by Roger Yang in 20120419
	// UD_AI_2401_Config()
	DPV_AI_CFG_VOL_2D5V_ABOVE = 1021,
	DPV_AI_CFG_VOL_2D5V_BELOW = 1022,
	DPV_AI_CFG_CURRENT = 1023,
	DPV_AI_CFG_RTD_4_WIRE = 1024,
	DPV_AI_CFG_RTD_3_WIRE = 1025,
	DPV_AI_CFG_RTD_2_WIRE = 1026,
	DPV_AI_CFG_RESISTER = 1027,
	DPV_AI_CFG_THERMO_COUPLE = 1028,
	DPV_AI_CFG_FULL_BRIDGE = 1029,
	DPV_AI_CFG_HALF_BRIDGE = 1030,
	// Trigger mode
	// DPV_TRI_MODE_POST = 700,
	// DPV_NONE    ==> DPV_TRI_SRC_SOFTWARE,
	
	// UD_AI_2401_PollConfig()
	DPV_AI_POLCFG_SPEED_ADC_2000_SPS = 1041,
	DPV_AI_POLCFG_SPEED_ADC_1000_SPS = 1042,
	DPV_AI_POLCFG_SPEED_ADC_640_SPS = 1043,
	DPV_AI_POLCFG_SPEED_ADC_320_SPS = 1044,
	DPV_AI_POLCFG_SPEED_ADC_160_SPS = 1045,
	DPV_AI_POLCFG_SPEED_ADC_80_SPS = 1046,
	DPV_AI_POLCFG_SPEED_ADC_40_SPS = 1047,
	DPV_AI_POLCFG_SPEED_ADC_20_SPS = 1048,
	
	DPV_AI_POLCFG_MAVG_DISABLE = 1051,
	DPV_AI_POLCFG_MAVG_2_SAMPLES = 1052,
	DPV_AI_POLCFG_MAVG_4_SAMPLES = 1053,
	DPV_AI_POLCFG_MAVG_8_SAMPLES = 1054,
	DPV_AI_POLCFG_MAVG_16_SAMPLES = 1055,

	// UD_AI_2401_Scale32 and UD_AI_2401_ContVScale32
	//DPV_AI_CFG_VOL_2D5V_ABOVE = 1021,
	//DPV_AI_CFG_VOL_2D5V_BELOW = 1022,
	DPV_AI_SCALE32_ADRANGE_25_V = 1061,
	DPV_AI_SCALE32_ADRANGE_12_5_V = 1062,
	DPV_AI_SCALE32_ADRANGE_2_5_V = 1063,
	DPV_AI_SCALE32_ADRANGE_0_3125_V = 1064,

	DPV_AI_SCALE32_INTYPE_VOL_2D5V_ABOVE = 1071,
	DPV_AI_SCALE32_INTYPE_VOL_2D5V_BELOW = 1072,
	DPV_AI_SCALE32_INTYPE_CURRENT = 1073,
	DPV_AI_SCALE32_INTYPE_RTD_4_WIRE = 1074,
	DPV_AI_SCALE32_INTYPE_RTD_3_WIRE = 1075,
	DPV_AI_SCALE32_INTYPE_RTD_2_WIRE = 1076,
	DPV_AI_SCALE32_INTYPE_RESISTER = 1077,
	DPV_AI_SCALE32_INTYPE_THERMO_COUPLE = 1078,
	DPV_AI_SCALE32_INTYPE_FULL_BRIDGE = 1079,
	DPV_AI_SCALE32_INTYPE_HALF_BRIDGE = 1080,
	
	// -------------------------------------------------------

	
	//Timing Basic
	DPV_TIMING_SAMPLE_INTERVAL = 450,
	DPV_TIMING_UPDATE_INTERVAL = 451,
	DPV_TIMING_TRANSFER_RATE = 452,
	DPV_TIMING_ITERATION_COUNT = 453,
	DPV_TIMING_ITERATION_INFINITE = 454,

	//DPV_TIMING_CLOCK_SOURCE_PACER = 455,
	DPV_TIMING_CLOCK_SOURCE_AFI0 = 456,
	DPV_TIMING_CLOCK_SOURCE_AFI1 = 457,
	//move to 7350 section
	//DPV_TIMING_CLOCK_SOURCE_AFI7 = 535,

	DPV_TIMING_RESTART_DISABLE = 458,
	DPV_TIMING_RESTART_COUNT = 459,
	DPV_TIMING_RESTART_INFINITE = 460,

	DPV_TIMING_9812_SIN = 470,
	DPV_TIMING_9812_SQUARE = 471,

	DPV_TIMING_CLOCK_SOURCE_STAR = 472,
	DPV_TIMING_CLOCK_SOURCE_PLL_10M = 473,
	DPV_TIMING_CLOCK_SOURCE_PLL_EXT = 474,
	DPV_TIMING_CLOCK_SOURCE_HANDSHAKING = 475,
	DPV_TIMING_7300_10M = 476,
	DPV_TIMING_7300_20M = 477,
	DPV_TIMING_7300_DO_CLK_TIMER_ACK = 478,
	DPV_TIMING_7300_DO_CLK_10M_ACK = 479,
	DPV_TIMING_7300_DO_CLK_20M_ACK = 480,

	DPV_TIMING_CLOCK_SOURCE_GPI0 = 481,
	DPV_TIMING_CLOCK_SOURCE_GPI1 = 482,
    DPV_TIMING_CLOCK_SOURCE_GPI2 = 483,
	DPV_TIMING_CLOCK_SOURCE_GPI3 = 484,
	DPV_TIMING_CLOCK_SOURCE_GPI4 = 485,
	DPV_TIMING_CLOCK_SOURCE_GPI5 = 486,
    DPV_TIMING_CLOCK_SOURCE_GPI6 = 487,
	DPV_TIMING_CLOCK_SOURCE_GPI7 = 488,

	DPV_TIMING_CLOCK_PXI_CLK_10M = 489,

	DPV_TIMING_CLOCK_SOURCE_ADCONV = 490,
	DPV_TIMING_CLOCK_SOURCE_DACONV = 491,

	DPV_TIMING_CLOCK_RUN_MODE_FREE_RUN         = 492,
	DPV_TIMING_CLOCK_RUN_MODE_HAND_SHAKE       = 493,
	DPV_TIMING_CLOCK_RUN_MODE_BURST_HAND_SHAKE = 494,
	DPV_TIMING_CLOCK_SOURCE_PLL_100M = 495,

	//AI advancage
	DPV_TIMING_9111_EDO_INPUT = 500,
	DPV_TIMING_9111_EDO_OUTPUT = 501,
	DPV_TIMING_9111_EDO_OUTPUT_CH = 502,

	DPV_TIMING_9116_LOCAL_GROUND = 503,
	DPV_TIMING_9116_USER_DEFINE = 504,
	DPV_TIMING_9116_CONVERSION_SP = 505,
	DPV_TIMING_9116_CONVERSION_INT = 506,
	DPV_TIMING_9116_CONVERSION_DMA = 507,

	DPV_TIMING_9118_BURST = 508,
	DPV_TIMING_9118_BURST_SAM_HOLD = 509,

	DPV_TIMING_9812_FRE_MORE_THEN_PCI = 510,
	DPV_TIMING_9812_FRE_LESS_THEN_PCI = 511,

	DPV_TIMING_9524_VXE_SENCE_LOCAL = 512,
	DPV_TIMING_9524_VXE_SENCE_REMOTE = 513,

	DPV_TIMING_PORT_WIDTH_8 = 514,
	DPV_TIMING_PORT_WIDTH_16 = 515,
	//move to 7350 support section
	//DPV_TIMING_PORT_WIDTH_24 = 530,
	DPV_TIMING_PORT_WIDTH_32 = 516,
	DPV_TIMING_7300_DO_WAIT_TRIGGER = 517,
	DPV_TIMING_7300_DO_WAIT_FIFO = 518,
	DPV_TIMING_7300_DO_WAIT_TRIGGER_AND_FIFO = 519,
	
	DPV_TIMING_DAQ2K_AO_STOP_SRC_SOFTWARE = 520,
	DPV_TIMING_DAQ2K_AO_STOP_SRC_AFI0 = 521,
	DPV_TIMING_DAQ2K_AO_STOP_SRC_ANATRIGPIN = 522,
	DPV_TIMING_DAQ2K_AO_STOP_SRC_AFI1 = 523,
	DPV_TIMING_DAQ2K_AO_STOP_IMMEDIATE = 524,
	DPV_TIMING_DAQ2K_AO_STOP_NEXT_UPDATE = 525,
	DPV_TIMING_DAQ2K_AO_STOP_ITERATION_COUNT = 526,
	DPV_TIMING_25XX_AO_UPDATE_FIFO = 527,
	DPV_TIMING_25XX_AO_UPDATE_DMA = 528,

	//7350 support
	DPV_TIMING_PORT_WIDTH_24 = 530,
	DPV_TIMING_CLOCK_SOURCE_ECLK_IN  = 531,
	DPV_TIMING_CLOCK_SOURCE_ECLK_OUT = 532,
	DPV_TIMING_CLOCK_SOURCE_ECLK_OUT_AFI6 = 533,
	DPV_TIMING_CLOCK_SOURCE_ECLK_OUT_AFI7 = 534,
	DPV_TIMING_DIO_DDA_LAG = 535,
	DPV_TIMING_DIO_DDA_LEAD = 536,

	DPV_TC_MODE_TOGGLE_OUTPUT = 600,
	DPV_TC_MODE_PROG_ONE_SHOT = 601,
	DPV_TC_MODE_RATE_GENERATOR = 602,
	DPV_TC_MODE_SQ_WAVE_GENERATOR = 603,
	DPV_TC_MODE_SOFT_TRIG = 604,
	DPV_TC_MODE_HARD_TRIG = 605,

	DPV_TC_MODE_GENERAL_COUNTER = 606,
	DPV_TC_MODE_PULSE_GENERATION = 607,

	DPV_TC_MODE_SIMPLE_GATE_EVENT = 608,
	DPV_TC_MODE_SINGLE_PERIOD = 609,
	DPV_TC_MODE_SINGLE_PULSE_WIDTH = 610,
	DPV_TC_MODE_SINGLE_GATED_PULSE = 611,
	DPV_TC_MODE_SINGLE_TRIG_PULSE = 612,
	DPV_TC_MODE_RETRIG_SINGLE_PULSE = 613,
	DPV_TC_MODE_SINGLE_TRIG_CONT_PULSE = 614,
	DPV_TC_MODE_CONT_GATED_PULSE = 615,
	DPV_TC_MODE_EDGE_SEPAR_MSR = 616,
	DPV_TC_MODE_SINGLE_TRIG_PULSE_PWM = 617,
	DPV_TC_MODE_CONT_GATED_PULSE_PWM = 618,
	DPV_TC_MODE_CW_CCW_ENCODER = 619,
	DPV_TC_MODE_X1_AB_PHASE_ENCODER = 620,
	DPV_TC_MODE_X2_AB_PHASE_ENCODER = 621,
	DPV_TC_MODE_X4_AB_PHASE_ENCODER = 622,
	//DPV_TC_MODE_PHASE_Z = 623,
	DPV_TC_MODE_SINGLE_PULSE                = 624,
	DPV_TC_MODE_CONT_PULSE                  = 625,
	DPV_TC_MODE_CONT_PULSE_PWM              = 626,
	DPV_TC_MODE_X1_AB_PHASE_ENCODER_PHASE_Z = 627,
	DPV_TC_MODE_X2_AB_PHASE_ENCODER_PHASE_Z = 628,
	DPV_TC_MODE_X4_AB_PHASE_ENCODER_PHASE_Z = 629,
	DPV_TC_MODE_PULSGEN_OUTDIR_N            = 630,
	DPV_TC_MODE_PULSGEN_OUTDIR_R            = 631,
	DPV_TC_MODE_PULSGEN_CCW                 = 632,
	DPV_TC_MODE_MULTI_GATED_PULSE_GEN       = 633,
	
	DPV_TC_DIR_CONTROL_DOWN = 650,
	DPV_TC_DIR_CONTROL_UP = 651,
	DPV_TC_DATA_FORMAT_BIN = 652,
	DPV_TC_DATA_FORMAT_BCD = 653,
	DPV_TC_8554_CK1_CLK_SRC_C8M = 654,
	DPV_TC_8554_CK1_CLK_SRC_COUT11 = 655,
	DPV_TC_8554_CLK_SRC_EXTERNAL = 656,
	DPV_TC_8554_CLK_SRC_COUT_N = 657,
	DPV_TC_8554_CLK_SRC_CK1 = 658,
	DPV_TC_8554_CLK_SRC_COUT10 = 659,
	DPV_TC_8554_DEBOUNCE_SOURCE_2M = 660,
	DPV_TC_8554_DEBOUNCE_SOURCE_COUT11 = 661,

	//Trigger mode
	DPV_TRI_MODE_POST = 700,
	DPV_TRI_MODE_DELAY = 701,
	DPV_TRI_MODE_PRE = 702,
	DPV_TRI_MODE_MIDDLE = 703,
	DPV_TRI_SRC_SOFTWARE = 704,
	DPV_TRI_SRC_DIGITAL = 705,
	DPV_TRI_SRC_ANALOG = 706,
	DPV_TRI_RETRI_MODE_DISABLE = 707,
	DPV_TRI_RETRI_MODE_COUNT = 708,
	DPV_TRI_RETRI_MODE_INFINITE = 709,
	DPV_TRI_SRC_AFI0 = 710,
	DPV_TRI_SRC_AFI1 = 711,
	DPV_TRI_MODE_GATED = 712,
	DPV_TRI_SRC_SMB = 713,			// Added definition by Roger in 20120320

	//Basic trigger mode
	DPV_BAS_TRI_SRC_CH0 = 720,
	DPV_BAS_TRI_SRC_CH1 = 721,
	DPV_BAS_TRI_SRC_CH2 = 722,
	DPV_BAS_TRI_SRC_CH3 = 723,
	DPV_BAS_TRI_SRC_PXI_STAR = 724,
	DPV_BAS_TRI_SRC_GPI0 = 725,
	DPV_BAS_TRI_SRC_GPI1 = 726,
	DPV_BAS_TRI_SRC_GPI2 = 727,
	DPV_BAS_TRI_SRC_GPI3 = 728,
	DPV_BAS_TRI_SRC_GPI4 = 729,
	DPV_BAS_TRI_SRC_GPI5 = 730,
	DPV_BAS_TRI_SRC_GPI6 = 731,
	DPV_BAS_TRI_SRC_GPI7 = 732,
	DPV_BAS_TRI_SRC_9524_QD0 = 733,
	DPV_BAS_TRI_SRC_9524_PG0 = 734,
	DPV_BAS_TRI_SRC_CH4 = 735,
	DPV_BAS_TRI_SRC_CH5 = 736,
	DPV_BAS_TRI_SRC_CH6 = 737,
	DPV_BAS_TRI_SRC_CH7 = 738,
	DPV_BAS_TRI_SRC_CH8 = 739,
	DPV_BAS_TRI_SRC_CH9 = 740,
	DPV_BAS_TRI_SRC_CH10 = 741,
	DPV_BAS_TRI_SRC_CH11 = 742,
	DPV_BAS_TRI_SRC_CH12 = 743,
	DPV_BAS_TRI_SRC_CH13 = 744,
	DPV_BAS_TRI_SRC_CH14 = 745,
	DPV_BAS_TRI_SRC_CH15 = 746,
	DPV_BAS_TRI_SRC_PXIE_STAR = 747,
	
	//D2k Trigger
	DPV_D2K_TRI_DELAY_SRC_TIMEBASE = 750,
	DPV_D2K_TRI_DELAY_SRC_SAMPLES = 751,
	DPV_D2K_TRI_DELAY_COUNTER_SRC_INTERNAL = 752,
	DPV_D2K_TRI_DELAY_COUNTER_SRC_AFI1 = 753,
	DPV_D2K_TRI_DELAY_COUNTER_SRC_GPTC0 = 754,
	DPV_D2K_TRI_DELAY_COUNTER_SRC_GPTC1 = 755,
	DPV_D2K_TRI_BRK_DELAY_COUNTER_SRC_INTERNAL = 756,
	DPV_D2K_TRI_BRK_DELAY_COUNTER_SRC_AFI1 = 757,
	DPV_D2K_TRI_BRK_DELAY_COUNTER_SRC_GPTC0 = 758,
	DPV_D2K_TRI_BRK_DELAY_COUNTER_SRC_GPTC1 = 759,
	DPV_D2K_TRI_AIO_TRI_SRC_CH0 = 760,
	DPV_D2K_TRI_AIO_TRI_SRC_CH1 = 761,
	DPV_D2K_TRI_AIO_TRI_SRC_CH2 = 762,
	DPV_D2K_TRI_AIO_TRI_SRC_CH3 = 763,
	DPV_D2K_TRI_AIO_TRI_SRC_EXT_PIN = 764,
	DPV_D2K_TRI_AIO_TRI_SRC_CH_FIRST = 765,
	DPV_D2K_TRI_AIO_TRI_POL_BELOW_LOW = 766,
	DPV_D2K_TRI_AIO_TRI_POL_ABOVE_HIGH = 767,
	DPV_D2K_TRI_AIO_TRI_POL_INSIGN_REGION = 768,
	DPV_D2K_TRI_AIO_TRI_POL_HIGH_HYS = 769,
	DPV_D2K_TRI_AIO_TRI_POL_LOW_HYS = 770,
	DPV_D2K_TRI_AIO_TRI_POL_LOW_OR_HIGH = 771,
	//Data
	DPV_DATA_GET_DATA_METHOD_CALLBACK = 800,
	DPV_DATA_GET_DATA_METHOD_POLLING = 801,
	DPV_DATA_GET_DATA_METHOD_EVENT = 802,
	DPV_DATA_GET_DATA_METHOD_ALL =803,
	DPV_DATA_DATA_FORMAT_SCALED = 804,
	DPV_DATA_DATA_FORMAT_BINARY = 805,
	DPV_DATA_DATA_FORMAT_2D_SCALED = 806,
	DPV_DATA_DATA_FORMAT_2D_BINARY = 807,
	DPV_DATA_FILESYSTEM_WINDOWS = 810,
	DPV_DATA_FILESYSTEM_DAQSTREAMING = 811,
	
	// Advanced A/D mode	(DP_ADV_AD_MODE = 480)
	// WD_AI_Set_Mode() modeCtrl.
	DPV_ADV_AD_MODE_DAQSTEPPED	=  820,
	DPV_ADV_AD_MODE_RestartEn =  821,
	DPV_ADV_AD_MODE_DualBufEn =  822,
	DPV_ADV_AD_MODE_ManualSoftTrg =  823,
	
	// Added by Roger in 20120221------------------------------------------------------
	DPV_BAS_TRI_SRC_PXI_BUS0 = 900,
	DPV_BAS_TRI_SRC_PXI_BUS1 = 901,
	DPV_BAS_TRI_SRC_PXI_BUS2 = 902,
	DPV_BAS_TRI_SRC_PXI_BUS3 = 903,
	DPV_BAS_TRI_SRC_PXI_BUS4 = 904,
	DPV_BAS_TRI_SRC_PXI_BUS5 = 905,
	DPV_BAS_TRI_SRC_PXI_BUS6 = 906,
	DPV_BAS_TRI_SRC_PXI_BUS7 = 907,
	// Added by Roger in 20120221------------------------------------------------------
	
	// Added signal routing definition by Roger in 20120315------------------------------
	// DP_TIMING_DAQ2K_PXI_ROUTE_SIGNAL
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_TIMEBASE = 909,      	// 	"Timebase"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_CONVERT = 910,      	// 	"A/D convert"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_ADTRIGGER = 911,      // 	"A/D trigger"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_UPDATE = 912,      	//	"D/A update(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_ADSTART = 913,		// 	"A/D start(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_DATRIGGER = 914,      // 	"D/A trigger(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_SMB_CLK = 915,      	// 	"SMB clock(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_PXI_CLK_10_M = 933,	//	"PXI_CLK_10_M"
	DPV_TIMING_DAQ2K_PXI_ROUTE_SIGNAL_CLK_20_M = 934,		// 	"CLK_20_M"
	
	//DP_TIMING_DAQ2K_PXI_ROUTE_LINE
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_TRIG5 = 916,       	// 	"PXI trigger bus5"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_STAR = 917,       	// 	"PXI Star"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_SMB_CLK = 918,      // 	"SMB clock"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_TRG_IO = 919,       // 	"TRG_IO pin(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI0 = 920,       	// 	"AFI0"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI1 = 921,       	// 	"AFI1"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI2 = 922,       	// 	"AFI2(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI3 = 923,       	// 	"AFI3(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI4 = 924,       	// 	"AFI4(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI5 = 925,       	// 	"AFI5(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI6 = 926,       	// 	"AFI6(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_AFI7 = 927,       	// 	"AFI7(Reserved)"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_TRIG0 = 928,       	// 	"PXI trigger bus0"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_TRIG1 = 929,       	// 	"PXI trigger bus1"
	DPV_TIMING_DAQ2K_PXI_ROUTE_LINE_PXI_TRIG3 = 932,       	// 	"PXI trigger bus3"
	
	// DP_TIMING_DAQ2K_PXI_ROUTE_DIRECTION
	DPV_TIMING_DAQ2K_PXI_ROUTE_DIRECTION_RECEIVE = 930,     // 	"Receive"
	DPV_TIMING_DAQ2K_PXI_ROUTE_DIRECTION_TRANSMIT = 931,    // 	"Transmit"
	
	// DP_TIMING_DAQ2K_PXI_ROUTE
	DPV_TIMING_DAQ2K_PXI_ROUTE_ENABLE = 940,     			// 	"Enable"
	DPV_TIMING_DAQ2K_PXI_ROUTE_DISABLE = 941,     			// 	"Disable"
	// Added route signal definition by Roger in 20120315------------------------------
	
	// Event handle value for 9524 load cell
	// DP_EVENT_CALLBACK_MODE	= 219
	DPV_EVENT_CALLBACK_ADD = 960,     			// 	"Add"
	DPV_EVENT_CALLBACK_REMOVE = 961,     		// 	"Remove"
	// DP_EVENT_CALLBACK_TYPE	= 220 
	DPV_EVENT_CALLBACK_AIEND = 965,     		// 	"AIEnd"
	DPV_EVENT_CALLBACK_DBEVENT = 966,     		// 	"DBEvent"
	DPV_EVENT_CALLBACK_TRIGEVENT = 967,     	// 	"TrigEvent"
	DPV_EVENT_CALLBACK_P9524_INT_LC_EOC = 968,  // 	"P9524_INT_LC_EOC"
	DPV_EVENT_CALLBACK_P9524_INT_GP_EOC = 969,     	// 	"P9524_INT_GP_EOC"
	
} DAQPilotValueID;

typedef enum tagDAQPilotStatusID
{
	DP_STATUS_NOERROR = 0,
	DP_STATUS_DEVICE_STOP       = 1,
	DP_STATUS_DEVICE_RUNING     = 2,
	DP_STATUS_DEVICE_DIRTY      = 4,
	DP_STATUS_DEVICE_EVENT      = 8,
	DP_STATUS_END_FLAG = 99,
	DP_WARNING_START_FLAG = 100,
	DP_WARNING_CONTINUE_MODE_LOST_DATA = 101,
	DP_WARNING_SCAN_ARE_INCOMPATIBLE_WITH_SAMPLE_INTERVAL = 102,
	DP_WARNING_END_THREAD = 103,
	DP_WARNING_TASK_VERSION_NOT_COMPATIBLE = 104,
	DP_WARNING_END_FLAG = 199,
	DP_ERR_START_FLAG = -1,
	DP_ERR_CHANNEL_NUMBER_OUT_OF_RANGE = -2,
	DP_ERR_CHANNEL_PROPERTY_OUT_OF_RANGE = -3,
	DP_ERR_PROPERTY_OUT_OF_RANGE = -4,
	DP_ERR_VALUE_OUT_OF_RANGE = -5,
	DP_ERR_UNEXPECTED_PARAMETER_TYPE = -6,
	DP_ERR_DEVICE_NOT_SUPPORT_ASSIGN_TASK = -7,
	DP_ERR_FUNCTION_NOT_SUPPORT_ASSIGN_TASK = -8,
	DP_ERR_FUNCTION_CAN_NOT_SUPPORT_MULTI_CHANNEL = -9,
	DP_ERR_THIS_API_CAN_NOT_SUPPORT_MULTI_CHANNEL = -10,
	DP_ERR_LOAD_CONFIG_FILE_FAILED = -11,
	DP_ERR_CONFIG_FILE_FORMAT_ERROR = -12,
	DP_ERR_CONFIG_FILE_ISNOT_AGENT_FORMAT = -13,
	DP_ERR_BUILD_API_FAILED = -14,
	DP_ERR_DEVICE_NOT_SUPPORT_FUNCTION = -15,
	DP_ERR_DEVICE_IS_BUSY = -16,
	DP_ERR_DEVICE_IS_STOP = -17,
	DP_ERR_INVALIDATE_TASK_HANDLE = -18,
	DP_ERR_INVALIDATE_PARAMETER = -19,
	DP_ERR_INTERNAL_DASK_ERROR = -20,
	DP_ERR_CREATE_THREAD = -21,
	DP_ERR_OUT_OF_DRIVER_MEMORY = -22,
	DP_ERR_D2K_AO_FIFO_NOT_SUPPORT_DOUBLE_BUFFER_MODE = -23,
	DP_ERR_NO_ENABLE_CHANNEL = -24,
	DP_ERR_NO_LOG_FILENAME = -25,
	DP_ERR_REGISTER_DEVICE_FAILED = -26,
	DP_ERR_UNREGISTER_DEVICE_FAILED = -27,
	DP_ERR_TOO_LARGE_NUMOFSCAN_TO_SUPPORT_TRIGGER_MODE = -28,
	DP_ERR_WAIT_FAILED = -29,
	DP_ERR_WAIT_TIMEOUT = -30,
	DP_ERR_SCAN_ARE_INCOMPATIBLE_WITH_SAMPLE_INTERVAL = -31,
	DP_ERR_CLOCK_DIVIDER_NEED_EVEN_NUMBER = -32,
	DP_ERR_OUT_OF_MEMORY = -33,
	DP_ERR_NUMOFSCAN_ARE_INCOMPATIBLE_WITH_RETRIG_COUNT = -34,
	DP_ERR_PERTRIGGER_COUNT_OUT_OF_RANGE = -35,
	DP_ERR_PERTRIGGER_COUNT_IS_UNEQUAL_TO_MCOUNTER = -36,
	DP_ERR_NUMOFSCAN_NEED_EVEN_NUMBER = -37,
	DP_ERR_CALL_CONFIG_API_FIRST = -38,
	DP_ERR_NO_CHANNEL_ENABLED = -39,
	DP_ERR_POST_TRIGGER_COUNT_CAN_NOT_GREAT_THAN_NUM_OF_SCAN = -40,
	DP_ERR_RE_TRIGGER_COUNT_OUT_OF_RANGE = -41,
	DP_ERR_DOUBLE_BUFFER_OVERRUN = -42,
	DP_ERR_PCI9524_DELAY_TRIGGER_NOT_SUPPORT = -43,
	DP_ERR_PRE_MID_TRIGGER_MODE_NOT_SUPPORT = -44,
	DP_ERR_OUTPUT_DATA_LENGTH_LESS_THAN_NUM_OF_SCAN = -45,
	DP_ERR_READ_ONLY_PROPERTY_CANNOT_BE_CHANGED = -46,
	DP_ERR_NUMBER_OF_SCAN_OUT_OF_RANGE = -47,
	DP_ERR_SAMPLING_RATE_PER_CHANNEL_OUT_OF_RANGE = -48,
	DP_ERR_GATED_TRIGGER_SUPPORT_ONLY_EXT_TRIGGER_SOURCE = -49,
	DP_ERR_TRIGGER_SOURCE_CHANNEL_OUT_OF_RANGE = -50,
	DP_ERR_TRIGGER_ANALOG_TRIGGER_CH_IS_NOT_ENABLE = -51,
	DP_ERR_TRIGGER_ANALOG_TRIGGER_LEVEL_OUT_OF_RANGE = -52,
	DP_ERR_DELAY_TRIGGER_COUNT_OUT_OF_RANGE = -53,
	DP_ERR_NUMOFSCAN_NEED_MULTIPLES_OF_EIGHT = -54,
	DP_ERR_USB_DEVICE_DISCONNECTED = -55,
	DP_ERR_EVENT_CALLBACK_FAILED = -61,
	DP_ERR_END_FLAG = -9999,
} DAQPilotStatusID;

#ifndef AFX_API_EXPORT
	#define AFX_API_EXPORT __declspec(dllimport)
#endif

//Initial(Uninitial) API
AFX_API_EXPORT HANDLE DAQPilot_CreateTask(int nSubTaskID, AllDeviceTypeID eDeviceID, int nBoardIndex, BOOL bShowErrorMessage);

//Config channel property API
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_EnableSingleChannel(HANDLE hTask, int nChannelNum);
#ifdef _AFX
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelStringProperty(HANDLE hTask, int nChannelNum, LPCSTR lpszChannelPropertyID, VARIANT vValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelProperty(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID, VARIANT vValue);
#endif //_AFXDLL
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelPropertyBool(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID, BOOL bValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelPropertyEnum(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID, DAQPilotValueID nAgentID);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelPropertyI4(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID, int nValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelPropertyU4(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID, DWORD dwValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelPropertyF64(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID, double dbValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetChannelPropertySTR(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID, LPCSTR lpszValue);

#ifdef _AFX
AFX_API_EXPORT VARIANT DAQPilot_GetChannelStringProperty(HANDLE hTask, int nChannelNum, LPCSTR lpszChannelPropertyID);
AFX_API_EXPORT VARIANT DAQPilot_GetChannelProperty(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID);
#endif //_AFXDLL
AFX_API_EXPORT BOOL DAQPilot_GetChannelPropertyBool(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID);
AFX_API_EXPORT DAQPilotValueID DAQPilot_GetChannelPropertyEnum(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID);
AFX_API_EXPORT int DAQPilot_GetChannelPropertyI4(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID);
AFX_API_EXPORT DWORD DAQPilot_GetChannelPropertyU4(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID);
AFX_API_EXPORT double DAQPilot_GetChannelPropertyF64(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID);
AFX_API_EXPORT LPCSTR DAQPilot_GetChannelPropertySTR(HANDLE hTask, int nChannelNum, ChannelPropertyID eChannelPropertyID);

//Config property API
#ifdef _AFX
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetStringProperty(HANDLE hTask, LPCSTR lpszPropertyID, VARIANT vValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetProperty(HANDLE hTask, DAQPilotPropertyID nPropertyID, VARIANT vValue);
#endif //_AFXDLL
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetPropertyBool(HANDLE hTask, DAQPilotPropertyID nPropertyID, BOOL bValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetPropertyEnum(HANDLE hTask, DAQPilotPropertyID nPropertyID, DAQPilotValueID nAgentID);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetPropertyI4 (HANDLE hTask,  DAQPilotPropertyID nPropertyID, int nValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetPropertyU4 (HANDLE hTask,  DAQPilotPropertyID nPropertyID, DWORD dwValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetPropertyF64(HANDLE hTask,  DAQPilotPropertyID nPropertyID, double dbValue);
AFX_API_EXPORT DAQPilotStatusID  DAQPilot_SetPropertySTR(HANDLE hTask,  DAQPilotPropertyID nPropertyID, LPCSTR lpszValue);

#ifdef _AFX
AFX_API_EXPORT VARIANT DAQPilot_GetStringProperty(HANDLE hTask, LPCSTR lpszPropertyID);
AFX_API_EXPORT VARIANT DAQPilot_GetProperty(HANDLE hTask, DAQPilotPropertyID nPropertyID);
#endif //_AFXDLL
AFX_API_EXPORT BOOL   DAQPilot_GetPropertyBool(HANDLE hTask, DAQPilotPropertyID nPropertyID);
AFX_API_EXPORT DAQPilotValueID  DAQPilot_GetPropertyEnum(HANDLE hTask, DAQPilotPropertyID nPropertyID);
AFX_API_EXPORT int    DAQPilot_GetPropertyI4 (HANDLE hTask,  DAQPilotPropertyID nPropertyID);
AFX_API_EXPORT DWORD  DAQPilot_GetPropertyU4 (HANDLE hTask,  DAQPilotPropertyID nPropertyID);
AFX_API_EXPORT double DAQPilot_GetPropertyF64(HANDLE hTask,  DAQPilotPropertyID nPropertyID);
AFX_API_EXPORT LPCSTR DAQPilot_GetPropertySTR(HANDLE hTask,  DAQPilotPropertyID nPropertyID);
//Get data API

#ifdef __cplusplus
}
#endif

#endif //!defined(AFX_DAQAGENTADV_H__D948E897_E4F2_4f89_9A81_67D292E0FE49__INCLUDED_)
